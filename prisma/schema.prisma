generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// Modelos de Negócio
// =========================

model Pousada {
  id                   String     @id @default(uuid())
  legalName            String
  tradeName            String
  phone                String?
  notes                String?
  monthlyProrationMode String     @default("actual_days")
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  deletedAt            DateTime?

  // Relações
  usuariosPousada      UsuarioPousada[]
  roomTypes            RoomType[]
  quartos              Quarto[]
  ratePlans            RatePlan[]
  childPolicies        ChildPricingPolicy[]
  addons               Addon[]
  hospedes             Hospede[] // Relação Inversa

  @@map("pousada")
}

model Hospede {
  id            String    @id @default(uuid())
  fullName      String
  documentId    String?
  documentType  String?
  email         String?
  phone         String?
  birthDate     DateTime?
  address       Json?
  notes         String?
  blacklisted   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relações
  pousadaId     String
  pousada       Pousada   @relation(fields: [pousadaId], references: [id], onDelete: Cascade)

  @@map("hospede")
}

model Addon {
  id             String   @id @default(uuid())
  name           String
  description    String?
  price          Decimal  @db.Decimal(12, 2)
  chargeUnit     String
  whenToCharge   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  // Relações
  pousadaId      String
  pousada        Pousada  @relation(fields: [pousadaId], references: [id], onDelete: Cascade)

  @@map("addon")
}

model RoomType {
  id            String    @id @default(uuid())
  name          String
  description   String?
  occupancyMode String
  baseOccupancy Int
  maxOccupancy  Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relações
  pousadaId     String
  pousada       Pousada   @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  quartos       Quarto[]
  rateRules     RateRule[]

  @@map("room_type")
}

model Quarto {
  id                     String      @id @default(uuid())
  pousadaId              String
  roomTypeId             String
  code                   String
  floor                  String?
  description            String?
  roomStatusCode         String
  housekeepingStatusCode String
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  deletedAt              DateTime?

  // Relações
  pousada                Pousada            @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  roomType               RoomType           @relation(fields: [roomTypeId], references: [id], onDelete: Restrict)
  roomStatus             RoomStatus         @relation(fields: [roomStatusCode], references: [code])
  housekeepingStatus     HousekeepingStatus @relation(fields: [housekeepingStatusCode], references: [code])
  camas                  Cama[]

  @@map("quarto")
}

model Cama {
  id          String   @id @default(uuid())
  code        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // Relações
  quartoId    String
  quarto      Quarto   @relation(fields: [quartoId], references: [id], onDelete: Cascade)

  @@unique([quartoId, code])
  @@map("cama")
}

model Usuario {
  id            String    @id @default(uuid())
  name          String
  username      String    @unique
  email         String    @unique
  phone         String?
  passwordHash  String
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relações
  pousadasUsuario UsuarioPousada[]

  @@map("usuario")
}

model UsuarioPousada {
  usuarioId String
  pousadaId String
  isDefault Boolean @default(false)

  // Relações
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  pousada   Pousada @relation(fields: [pousadaId], references: [id], onDelete: Cascade)

  @@id([usuarioId, pousadaId])
  @@map("usuario_pousada")
}

model RoomStatus {
  code        String   @id
  description String
  quartos     Quarto[]

  @@map("room_status")
}

model HousekeepingStatus {
  code        String   @id
  description String
  quartos     Quarto[]

  @@map("housekeeping_status")
}

model RatePlan {
  id          String    @id @default(uuid())
  name        String
  chargeScope String
  periodicity String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relações
  pousadaId   String
  pousada     Pousada @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  rateRules   RateRule[]

  @@map("rate_plan")
}

model RateRule {
  id         String   @id @default(uuid())
  startDate  DateTime
  endDate    DateTime
  price      Decimal  @db.Decimal(12, 2)
  mon        Boolean  @default(true)
  tue        Boolean  @default(true)
  wed        Boolean  @default(true)
  thu        Boolean  @default(true)
  fri        Boolean  @default(true)
  sat        Boolean  @default(true)
  sun        Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?

  // Relações
  ratePlanId String
  ratePlan   RatePlan @relation(fields: [ratePlanId], references: [id], onDelete: Cascade)
  roomTypeId String
  roomType   RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)

  @@map("rate_rule")
}

model ChildPricingPolicy {
  id              String    @id @default(uuid())
  name            String
  allowInShared   Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  // Relações
  pousadaId       String
  pousada         Pousada   @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  bands           ChildPricingBand[]

  @@map("child_pricing_policy")
}

model ChildPricingBand {
  id            String    @id @default(uuid())
  minAge        Int
  maxAge        Int
  chargeMode    String
  percentValue  Decimal?  @db.Decimal(6, 3)
  fixedAmount   Decimal?  @db.Decimal(12, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relações
  policyId      String
  policy        ChildPricingPolicy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@map("child_pricing_band")
}

