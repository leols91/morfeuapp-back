generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// Modelos de Negócio
// =========================

model Pousada {
  id                   String     @id @default(uuid())
  legalName            String
  tradeName            String
  phone                String?
  notes                String?
  monthlyProrationMode String     @default("actual_days")
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  deletedAt            DateTime? // <-- SOFT DELETE

  usuariosPousada      UsuarioPousada[]
  roomTypes            RoomType[]

  @@map("pousada")
}

model RoomType {
  id            String    @id @default(uuid())
  name          String
  description   String?
  occupancyMode String
  baseOccupancy Int
  maxOccupancy  Int
  createdAt     DateTime  @default(now()) // Adicionado para consistência
  updatedAt     DateTime  @updatedAt     // Adicionado para consistência
  deletedAt     DateTime? // <-- SOFT DELETE

  pousadaId     String
  pousada       Pousada    @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  quartos       Quarto[]

  @@map("room_type")
}

model Quarto {
  id                     String      @id @default(uuid())
  pousadaId              String
  roomTypeId             String
  code                   String
  floor                  String?
  description            String?
  roomStatusCode         String
  housekeepingStatusCode String
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  deletedAt              DateTime?   // <-- SOFT DELETE

  pousada                Pousada            @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  roomType               RoomType           @relation(fields: [roomTypeId], references: [id], onDelete: Restrict)
  roomStatus             RoomStatus         @relation(fields: [roomStatusCode], references: [code])
  housekeepingStatus     HousekeepingStatus @relation(fields: [housekeepingStatusCode], references: [code])
  camas                  Cama[]

  @@map("quarto")
}

model Cama {
  id          String   @id @default(uuid())
  code        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? // <-- SOFT DELETE

  quartoId    String
  quarto      Quarto   @relation(fields: [quartoId], references: [id], onDelete: Cascade)

  @@unique([quartoId, code])
  @@map("cama")
}


model Usuario {
  id            String    @id @default(uuid())
  name          String
  username      String    @unique
  email         String    @unique
  phone         String?
  passwordHash  String
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? // <-- SOFT DELETE

  pousadasUsuario UsuarioPousada[]

  @@map("usuario")
}

// --- Tabelas de Ligação e Lookup (geralmente não precisam de soft delete) ---

model UsuarioPousada {
  usuarioId String
  pousadaId String
  isDefault Boolean @default(false)

  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  pousada   Pousada @relation(fields: [pousadaId], references: [id], onDelete: Cascade)

  @@id([usuarioId, pousadaId])
  @@map("usuario_pousada")
}

model RoomStatus {
  code        String   @id
  description String
  quartos     Quarto[]

  @@map("room_status")
}

model HousekeepingStatus {
  code        String   @id
  description String
  quartos     Quarto[]

  @@map("housekeeping_status")
}
