generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// Modelos de Negócio
// =========================

model Pousada {
  id                   String     @id @default(uuid())
  legalName            String
  tradeName            String
  phone                String?
  notes                String?
  monthlyProrationMode String     @default("actual_days")
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  deletedAt            DateTime?

  // Relações
  usuariosPousada      UsuarioPousada[]
  roomTypes            RoomType[]
  quartos              Quarto[]
  ratePlans            RatePlan[]
  childPolicies        ChildPricingPolicy[]
  addons               Addon[]
  hospedes             Hospede[]
  reservas             Reserva[]
  productCategories    ProductCategory[]
  produtos             Produto[]
  stockMovements       StockMovement[]
  suppliers            Supplier[]
  apCategories         APCategory[]
  apInvoices           APInvoice[]
  cashAccounts         CashAccount[]
  salesChannels        SalesChannel[]

  @@map("pousada")
}

model Folio {
  id        String       @id @default(uuid())
  openedAt  DateTime     @default(now())
  closedAt  DateTime?
  balance   Decimal      @default(0) @db.Decimal(12, 2)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?

  // Relações
  reservaId String       @unique
  reserva   Reserva      @relation(fields: [reservaId], references: [id], onDelete: Cascade)
  entries   FolioEntry[]
  payments  Payment[] // Relação Inversa

  @@map("folio")
}

model PaymentMethod {
  code        String    @id // cash, card_credit, card_debit, pix, transfer
  description String
  payments    Payment[]

  @@map("payment_method")
}

model Payment {
  id          String   @id @default(uuid())
  amount      Decimal  @db.Decimal(12, 2)
  reference   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // Relações
  folioId     String
  folio       Folio         @relation(fields: [folioId], references: [id], onDelete: Cascade)
  methodCode  String
  method      PaymentMethod @relation(fields: [methodCode], references: [code], onDelete: Restrict) // CORRIGIDO: references: [code]
  accountId   String
  account     CashAccount   @relation(fields: [accountId], references: [id], onDelete: Restrict)

  @@map("payment")
}

model CashAccount {
  id              String    @id @default(uuid())
  name            String
  typeCode        String
  openingBalance  Decimal   @default(0) @db.Decimal(14, 2)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  // Relações
  pousadaId       String
  pousada         Pousada   @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  apPayments      APPayment[]
  ledgerEntries   CashLedger[]
  folioPayments   Payment[] // Relação Inversa

  @@map("cash_account")
}


// --- DEMAIS MODELOS (SEM ALTERAÇÃO, APENAS ADIÇÃO DE RELAÇÃO INVERSA) ---

model Reserva {
  id               String    @id @default(uuid())
  reservationType  String
  reservationClass String
  checkinDate      DateTime
  checkoutDate     DateTime
  adults           Int       @default(1)
  children         Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  pousadaId        String
  pousada          Pousada       @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  hospedes         ReservaHospede[]
  alocacoes        ReservaAlocacao[]
  channelId        String?
  channel          SalesChannel? @relation(fields: [channelId], references: [id], onDelete: SetNull)
  folio            Folio?

  @@map("reserva")
}

model FolioEntry {
  id          String   @id @default(uuid())
  kind        String
  description String
  quantity    Decimal  @default(1) @db.Decimal(12, 3)
  unitPrice   Decimal  @db.Decimal(12, 2)
  total       Decimal  @db.Decimal(12, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  folioId     String
  folio       Folio    @relation(fields: [folioId], references: [id], onDelete: Cascade)
  produtoId   String?
  produto     Produto? @relation(fields: [produtoId], references: [id], onDelete: SetNull)

  @@map("folio_entry")
}

model SalesChannel {
  id                       String    @id @default(uuid())
  name                     String
  code                     String
  defaultCommissionPercent Decimal   @default(0) @db.Decimal(6, 3)
  settlementModel          String
  commissionScope          String
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  deletedAt                DateTime?

  pousadaId                String
  pousada                  Pousada   @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  supplierId               String?
  supplier                 Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  reservas                 Reserva[]

  @@unique([pousadaId, code])
  @@map("sales_channel")
}

model Supplier {
  id            String    @id @default(uuid())
  legalName     String
  documentId    String?
  email         String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  pousadaId     String
  pousada       Pousada      @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  apInvoices    APInvoice[]
  salesChannels SalesChannel[]

  @@map("supplier")
}

model APCategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  pousadaId   String
  pousada     Pousada @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  apItems     APInvoiceItem[]

  @@map("ap_category")
}

model APInvoice {
  id          String    @id @default(uuid())
  description String
  amount      Decimal   @db.Decimal(12, 2)
  dueDate     DateTime
  status      String    @default("open")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  pousadaId   String
  pousada     Pousada   @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  supplierId  String
  supplier    Supplier  @relation(fields: [supplierId], references: [id], onDelete: Restrict)
  items       APInvoiceItem[]
  payments    APPayment[]

  @@map("ap_invoice")
}

model APInvoiceItem {
  id           String   @id @default(uuid())
  description  String
  quantity     Decimal  @db.Decimal(12, 3)
  unitCost     Decimal  @db.Decimal(12, 2)
  total        Decimal  @db.Decimal(12, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  apInvoiceId  String
  apInvoice    APInvoice @relation(fields: [apInvoiceId], references: [id], onDelete: Cascade)
  apCategoryId String
  apCategory   APCategory @relation(fields: [apCategoryId], references: [id], onDelete: Restrict)
  produtoId    String?
  produto      Produto?   @relation(fields: [produtoId], references: [id], onDelete: SetNull)

  @@map("ap_invoice_item")
}

model CashLedger {
  id          String   @id @default(uuid())
  entryType   String
  amount      Decimal  @db.Decimal(14, 2)
  reference   String?
  createdAt   DateTime @default(now())

  accountId   String
  account     CashAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("cash_ledger")
}

model APPayment {
  id        String   @id @default(uuid())
  amount    Decimal  @db.Decimal(14, 2)
  paidAt    DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  apInvoiceId String
  apInvoice   APInvoice @relation(fields: [apInvoiceId], references: [id], onDelete: Cascade)
  accountId   String
  account     CashAccount @relation(fields: [accountId], references: [id], onDelete: Restrict)

  @@map("ap_payment")
}

model ProductCategory {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  pousadaId String
  pousada   Pousada @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  produtos  Produto[]

  @@map("product_category")
}

model Produto {
  id             String    @id @default(uuid())
  sku            String?
  name           String
  unit           String
  costPrice      Decimal?  @db.Decimal(12, 2)
  salePrice      Decimal   @db.Decimal(12, 2)
  stockControl   Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  pousadaId      String
  pousada        Pousada   @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  categoryId     String
  category       ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  stockMovements StockMovement[]
  apItems        APInvoiceItem[]
  folioEntries   FolioEntry[]

  @@map("produto")
}

model StockMovementType {
  code        String          @id
  description String
  movements   StockMovement[]

  @@map("stock_movement_type")
}

model StockMovement {
  id        String   @id @default(uuid())
  quantity  Decimal  @db.Decimal(12, 3)
  unitCost  Decimal? @db.Decimal(12, 2)
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  pousadaId String
  pousada   Pousada           @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  produtoId String
  produto   Produto           @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  typeCode  String
  type      StockMovementType @relation(fields: [typeCode], references: [code])

  @@map("stock_movement")
}

model Hospede {
  id            String    @id @default(uuid())
  fullName      String
  documentId    String?
  documentType  String?
  email         String?
  phone         String?
  birthDate     DateTime?
  address       Json?
  notes         String?
  blacklisted   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  pousadaId     String
  pousada       Pousada   @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  reservas      ReservaHospede[]

  @@map("hospede")
}

model ReservaHospede {
  reservaId     String
  reserva       Reserva  @relation(fields: [reservaId], references: [id], onDelete: Cascade)
  hospedeId     String
  hospede       Hospede  @relation(fields: [hospedeId], references: [id], onDelete: Cascade)
  isPrimary     Boolean  @default(false)

  @@id([reservaId, hospedeId])
  @@map("reserva_hospede")
}

model ReservaAlocacao {
  id           String    @id @default(uuid())
  checkinDate  DateTime
  checkoutDate DateTime

  reservaId    String
  reserva      Reserva   @relation(fields: [reservaId], references: [id], onDelete: Cascade)
  quartoId     String
  quarto       Quarto    @relation(fields: [quartoId], references: [id], onDelete: Cascade)
  camaId       String?
  cama         Cama?     @relation(fields: [camaId], references: [id], onDelete: Cascade)

  @@map("reserva_alocacao")
}

model Addon {
  id           String   @id @default(uuid())
  name         String
  description  String?
  price        Decimal  @db.Decimal(12, 2)
  chargeUnit   String
  whenToCharge String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  pousadaId    String
  pousada      Pousada  @relation(fields: [pousadaId], references: [id], onDelete: Cascade)

  @@map("addon")
}

model RoomType {
  id            String    @id @default(uuid())
  name          String
  description   String?
  occupancyMode String
  baseOccupancy Int
  maxOccupancy  Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  pousadaId     String
  pousada       Pousada   @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  quartos       Quarto[]
  rateRules     RateRule[]

  @@map("room_type")
}

model Quarto {
  id                     String      @id @default(uuid())
  pousadaId              String
  roomTypeId             String
  code                   String
  floor                  String?
  description            String?
  roomStatusCode         String
  housekeepingStatusCode String
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  deletedAt              DateTime?

  pousada                Pousada            @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  roomType               RoomType           @relation(fields: [roomTypeId], references: [id], onDelete: Restrict)
  roomStatus             RoomStatus         @relation(fields: [roomStatusCode], references: [code])
  housekeepingStatus     HousekeepingStatus @relation(fields: [housekeepingStatusCode], references: [code])
  camas                  Cama[]
  alocacoes              ReservaAlocacao[]

  @@map("quarto")
}

model Cama {
  id          String   @id @default(uuid())
  code        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  quartoId    String
  quarto      Quarto   @relation(fields: [quartoId], references: [id], onDelete: Cascade)
  alocacoes   ReservaAlocacao[]

  @@unique([quartoId, code])
  @@map("cama")
}

model Usuario {
  id            String    @id @default(uuid())
  name          String
  username      String    @unique
  email         String    @unique
  phone         String?
  passwordHash  String
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  pousadasUsuario UsuarioPousada[]

  @@map("usuario")
}

model UsuarioPousada {
  usuarioId String
  pousadaId String
  isDefault Boolean @default(false)

  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  pousada   Pousada @relation(fields: [pousadaId], references: [id], onDelete: Cascade)

  @@id([usuarioId, pousadaId])
  @@map("usuario_pousada")
}

model RoomStatus {
  code        String   @id
  description String
  quartos     Quarto[]

  @@map("room_status")
}

model HousekeepingStatus {
  code        String   @id
  description String
  quartos     Quarto[]

  @@map("housekeeping_status")
}

model RatePlan {
  id          String    @id @default(uuid())
  name        String
  chargeScope String
  periodicity String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  pousadaId   String
  pousada     Pousada @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  rateRules   RateRule[]

  @@map("rate_plan")
}

model RateRule {
  id         String   @id @default(uuid())
  startDate  DateTime
  endDate    DateTime
  price      Decimal  @db.Decimal(12, 2)
  mon        Boolean  @default(true)
  tue        Boolean  @default(true)
  wed        Boolean  @default(true)
  thu        Boolean  @default(true)
  fri        Boolean  @default(true)
  sat        Boolean  @default(true)
  sun        Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?

  ratePlanId String
  ratePlan   RatePlan @relation(fields: [ratePlanId], references: [id], onDelete: Cascade)
  roomTypeId String
  roomType   RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)

  @@map("rate_rule")
}

model ChildPricingPolicy {
  id            String    @id @default(uuid())
  name          String
  allowInShared Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  pousadaId     String
  pousada       Pousada   @relation(fields: [pousadaId], references: [id], onDelete: Cascade)
  bands         ChildPricingBand[]

  @@map("child_pricing_policy")
}

model ChildPricingBand {
  id           String    @id @default(uuid())
  minAge       Int
  maxAge       Int
  chargeMode   String
  percentValue Decimal?  @db.Decimal(6, 3)
  fixedAmount  Decimal?  @db.Decimal(12, 2)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  policyId     String
  policy       ChildPricingPolicy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@map("child_pricing_band")
}

